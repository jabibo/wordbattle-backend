# Create the API documentation file
$apiDocContent = @"
# WordBattle Backend API Documentation

## Overview
WordBattle is a multiplayer word game similar to Scrabble. This document provides essential information for developers building applications on top of the WordBattle backend.

## Base URL
http://localhost:8000

## Authentication
The API uses JWT token authentication.

1. **Register a user**:
POST /users/register
Content-Type: application/json

{
"username": "player1",
"password": "securepassword"
}
2. **Get authentication token**:
POST /auth/token
Content-Type: application/x-www-form-urlencoded

username=player1&password=securepassword

Response:
```json
{
  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "token_type": "bearer"
}
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Game Flow
Create a game:
POST /games/
Authorization: Bearer <token>
Response:
{
  "id": "550e8400-e29b-41d4-a716-446655440000",
  "state": "[[null, null, ...]]"
}
2 Set game language (optional):
POST /games/{game_id}/language?language=en
Authorization: Bearer <token>
3 Join a game:
POST /games/{game_id}/join
Authorization: Bearer <token>
{
  "rack": "ABCDEFG"
}
4. Start the game (after at least 2 players have joined):
POST /games/{game_id}/start
Authorization: Bearer <token>
Response:
{
  "current_player_id": 1
}
5. Make a move:

POST /games/{game_id}/move
Authorization: Bearer <token>
Content-Type: application/json

{
  "move_data": [
    {"row": 7, "col": 7, "letter": "H"},
    {"row": 7, "col": 8, "letter": "E"},
    {"row": 7, "col": 9, "letter": "L"},
    {"row": 7, "col": 10, "letter": "L"},
    {"row": 7, "col": 11, "letter": "O"}
  ]
}
Response:
{
  "message": "Zug erfolgreich",
  "points": 10,
  "words": [["HELLO", 10]],
  "new_state": [[null, null, ...]]
}
6 Get game state:
GET /games/{game_id}

Response:
{
  "id": "550e8400-e29b-41d4-a716-446655440000",
  "state": "[[null, null, ...]]",
  "current_player_id": 2
}
7. Get player's rack:
GET /games/{game_id}/rack
Authorization: Bearer <token>
Response:
{
  "rack": "ABCDEFG"
}
8. Pass turn:
POST /games/{game_id}/pass
Authorization: Bearer <token>
9. Exchange letters:
POST /games/{game_id}/exchange?letters=ABC
Authorization: Bearer <token>
10 Deal letters:
POST /games/{game_id}/deal
Authorization: Bearer <token>
11 Complete game:
POST /games/{game_id}/complete
Authorization: Bearer <token>

Game Rules
Words must be valid in the selected language

First word must include the center square (7,7)

Words must connect to existing words

Players take turns placing words

Game ends when a player uses all letters, all players pass consecutively, or manually completed

Multi-Language Support
The game supports multiple languages for wordlists. Set the language when creating a game using the /games/{game_id}/language endpoint.

Error Handling
The API returns standard HTTP status codes:

200: Success

400: Bad Request (invalid move, etc.)

401: Unauthorized (missing/invalid token)

403: Forbidden (not your turn, etc.)

404: Not Found (game not found, etc.)

WebSocket Support
Not currently implemented, polling is required.

User Profile
GET /me
Authorization: Bearer <token>
Response:
{
  "id": 1,
  "username": "player1"
}
Admin API
Admin endpoints for managing wordlists:
1. List wordlists:
GET /admin/wordlists
Authorization: Bearer <token>
2. Import wordlist:
POST /admin/wordlists/import
Authorization: Bearer <token>
Content-Type: multipart/form-data

language=en&file=@/path/to/wordlist.txt
3. Delete wordlist:
DELETE /admin/wordlists/{language}
Authorization: Bearer <token>

Database Schema
users: User accounts

games: Game state and metadata

players: Player information for each game

moves: Move history

wordlists: Words for different languages "@ Set-Content -Path "wordbattle_backend_api_documentation.md" -Value $apiDocContent -Encoding utf8