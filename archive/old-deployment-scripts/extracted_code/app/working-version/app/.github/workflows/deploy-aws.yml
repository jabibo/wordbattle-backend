name: Deploy to AWS

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: wordbattle-backend
  APP_RUNNER_SERVICE: wordbattle-backend

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: wordbattle_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wordbattle_test
        SECRET_KEY: test-secret-key
        TESTING: 1
      run: |
        python -m pytest tests/ -v --tb=short

    - name: Run linting
      run: |
        python -m flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Also tag as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to App Runner (Production)
      if: github.ref == 'refs/heads/production'
      run: |
        # Trigger App Runner deployment
        aws apprunner start-deployment \
          --service-arn arn:aws:apprunner:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:service/${{ env.APP_RUNNER_SERVICE }} \
          --region ${{ env.AWS_REGION }}

    - name: Deploy to App Runner (Staging)
      if: github.ref == 'refs/heads/main'
      run: |
        # Trigger App Runner deployment for staging
        aws apprunner start-deployment \
          --service-arn arn:aws:apprunner:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:service/${{ env.APP_RUNNER_SERVICE }}-staging \
          --region ${{ env.AWS_REGION }}

    - name: Wait for deployment
      run: |
        SERVICE_NAME=${{ env.APP_RUNNER_SERVICE }}
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          SERVICE_NAME="${SERVICE_NAME}-staging"
        fi
        
        echo "Waiting for deployment to complete..."
        aws apprunner wait service-running \
          --service-arn arn:aws:apprunner:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:service/$SERVICE_NAME \
          --region ${{ env.AWS_REGION }}

    - name: Get service URL
      id: get-url
      run: |
        SERVICE_NAME=${{ env.APP_RUNNER_SERVICE }}
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          SERVICE_NAME="${SERVICE_NAME}-staging"
        fi
        
        SERVICE_URL=$(aws apprunner describe-service \
          --service-arn arn:aws:apprunner:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:service/$SERVICE_NAME \
          --query "Service.ServiceUrl" \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        echo "service-url=https://$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Test deployment
      run: |
        echo "Testing deployment at ${{ steps.get-url.outputs.service-url }}"
        
        # Wait a bit for the service to be fully ready
        sleep 30
        
        # Test health endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.get-url.outputs.service-url }}/health")
        if [ $response -eq 200 ]; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed with status code: $response"
          exit 1
        fi
        
        # Test API documentation
        response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.get-url.outputs.service-url }}/docs")
        if [ $response -eq 200 ]; then
          echo "✅ API documentation accessible"
        else
          echo "❌ API documentation not accessible"
          exit 1
        fi

    - name: Create deployment summary
      run: |
        ENVIRONMENT="Production"
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ENVIRONMENT="Staging"
        fi
        
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
        echo "**Service URL:** ${{ steps.get-url.outputs.service-url }}" >> $GITHUB_STEP_SUMMARY
        echo "**API Docs:** ${{ steps.get-url.outputs.service-url }}/docs" >> $GITHUB_STEP_SUMMARY
        echo "**Health Check:** ${{ steps.get-url.outputs.service-url }}/health" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ steps.build-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Health check passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ API documentation accessible" >> $GITHUB_STEP_SUMMARY

  notify:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production')

    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          WordBattle Backend deployment ${{ job.status }}
          Environment: ${{ github.ref == 'refs/heads/production' && 'Production' || 'Staging' }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 